name : Tools Test and Push

env:
  IMAGE_NAME: digitalearthafrica/scripts

on:
  pull_request:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check formatting
      uses: rickstaa/action-black@v1
      id: action_black
      with:
        black_args: "--check tools"

    # Set up a cache
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Test Docker
      uses: docker/build-push-action@v2
      with:
        context: .
        tags: ${{ env.IMAGE_NAME }}
        outputs: type=docker
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=local,dest=/tmp/.buildx-cache-new

    # This ugly bit is necessary if you don't want your cache to grow forever
    # till it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Run tests in image
      run: |
          docker run --rm ${{ env.IMAGE_NAME }} bash -c "pip install -e /code/tools/monitoring; pip install -r /code/requirements-test.txt; pytest /code"

  push:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GADOCKERSVC_USERNAME }}
          password: ${{ secrets.GADOCKERSVC_PASSWORD }}

      - name: Get tag for this build if it exists
        run: |
          echo "VERSION=$(cat tools/monitoring/tools/_version.py | cut -d'"' -f 2)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }},${{ env.IMAGE_NAME }}
          labels: latest,${{ env.VERSION }}
